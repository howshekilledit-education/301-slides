
---
title: "Syllabus, Shapes, and Colors"
format:
  revealjs:
    theme: 
      - simple
    css: ../bl.css
    header-includes: |
      <link rel="preconnect" href="https://fonts.googleapis.com">
      <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
      <link href="https://fonts.googleapis.com/css2?family=Josefin+Sans:ital,wght@0,100..700;1,100..700&display=swap" rel="stylesheet">

sansfont: "Josefin Sans"
---

## Entrance Ticket {.smaller}

* Look through your classmates' links in *Forum Response 1 | Shapes and Colors* in UR Courses. 
* There are a lot of the posts, so let's split them up. If you are at the front of the room, look at posts at top; middle, middle; back, bottom.
* If you notice anything that stands out to you, reply with a comment! 
* **Make sure you reply to at least on post by 10:10** 

## Experience levels in this class vary!
Some students in this class have ten years of coding experiencce. Others have none! 

Try not to judge yourself by what other students can do. It's not a fair race if some started earlier than others. 

# The Syllabus, Highlights

::: {.vert}

## You can have a one-week extension on ONE of your first two projects. 
Otherwise, late work is not accepted. 

::: 

## If average grade is too high, everyone might have their grade reduced. 

The average grade should be around 70% to avoid a downward curve. Please adjust your grade expecations accordingly. 

# You should not come to class if you are sick. 

# You should always come to class if you are well and able.

## Participation is an important part of your grade. 

Your engagement score includes speaking in class, attendance, and in-class activities. 


## How to Complete Quiz {.smaller}

::: {.column width="30%"}

![](https://brownbagteacher.com/wp-content/uploads/2020/02/BubbledScantron-1024x770.png)

:::

::: {.column width="70%"}

* Write your first and last name
* Write today's date, Sept. 4
* Use black/blue pen or pencil
* Only use the left column
* Fill in the correct bubble completely
* You have twenty minutes 

:::

You can reference the syllabus on UR Courses, or I have a few paper copies.


**This is the *last* quiz where you can reference outside materials.** 


## What's on the Quiz vs. What's in Class

Slides and Coding Train tutorials will include the material you need to know for the next quiz.

Demos will cover quiz material and may preview more advanced material.

# In confusion lies the seeds to understanding!


## What is p5.js?

- A JavaScript library for creative coding
- Makes coding accessible for artists, designers, and beginners
- Based on Processing programming language
- Runs in web browsers

## () {} []

Parentheses ()

Curly braces {}

Square brackets []

^These always come in pairs!

## p5.js setup() & draw()

```{.javascript code-line-numbers="false"}
// <-- Variables you might access throughout your project goe on top. 
// Everything else should go {INSIDE A FUNCTION}

function setup(){

    // <-- Instructions in here execute AT THE START

}

function draw(){

    // <-- Instructions in here execute next, 
    // either over and over on a loop (default), 
    // or just once (if noLoop() is called)

}
```




## Core Structure: setup() 

```javascript
function setup() {
  // Runs once when program starts
  createCanvas(400, 400);
  background(220);
}
```

:::{.incremental}
- `setup()` runs **once** at the beginning
- Use it to initialize your canvas and set initial conditions
- Perfect place for `createCanvas()` and one-time configurations
:::

## Core Structure: draw() 

```javascript
function draw() {
  // Runs continuously, ~60 times per second
  background(220);
  ellipse(mouseX, mouseY, 50, 50);
}
```

:::{.incremental}
- `draw()` runs **continuously** (like animation frames)
- Default frame rate: 60 FPS
- Use for animations and interactive elements
- Often starts with `background()` to clear previous frame
:::

## createCanvas() 

```javascript
function setup() {
  createCanvas(800, 600);    // width, height in pixels
  createCanvas(400, 400);    // square canvas
}
```

:::{.incremental}
- Creates the drawing canvas
- First parameter: **width** in pixels
- Second parameter: **height** in pixels
- Usually called once in `setup()`
- Default size: 100x100 if not specified
:::

## Drawing Basic Shapes: rect() 

```javascript
function setup() {
  createCanvas(400, 400);
  rect(50, 50, 100, 75);     // x, y, width, height
  rect(200, 200, 80, 80);    // square rectangle
}
```

:::{.incremental}
- `rect(x, y, width, height)`
- **x, y**: top-left corner position
- **width**: horizontal size
- **height**: vertical size
- Coordinate system: (0,0) is top-left corner
:::

## Drawing Lines: line() 

```javascript
function setup() {
  createCanvas(400, 400);
  line(0, 0, 100, 100);      // x1, y1, x2, y2
  line(50, 200, 350, 50);    // diagonal line
}
```

:::{.incremental}
- `line(x1, y1, x2, y2)`
- Draws a straight line between two points
- **x1, y1**: starting point
- **x2, y2**: ending point
- Line thickness controlled by `strokeWeight()`
:::

## Rectangle Drawing Modes: rectMode() {.smaller}

```javascript
function setup() {
  createCanvas(400, 400);
  
  rectMode(CORNER);          // default: x,y = top-left
  rect(50, 50, 100, 75);
  
  rectMode(CENTER);          // x,y = center point
  rect(200, 200, 100, 75);
  
  rectMode(CORNERS);         // x1,y1 to x2,y2
  rect(250, 250, 350, 325);
}
```

## Fill Colors: fill() {.smaller}

```javascript
function setup() {
  createCanvas(400, 400);
  
  fill(255, 0, 0);           // red
  rect(50, 50, 100, 100);
  
  fill(0, 255, 0);           // green  
  rect(200, 50, 100, 100);
  
  fill(0, 0, 255);           // blue
  rect(50, 200, 100, 100);
}
```

:::{.incremental}
- `fill()` sets the interior color of shapes
- Affects all shapes drawn after it
- Various formats: RGB, grayscale, hex codes
:::

## Outline Colors: stroke() {.smaller}

```javascript
function setup() {
  createCanvas(400, 400);
  
  stroke(255, 0, 0);         // red outline
  strokeWeight(5);           // thick border
  fill(255, 255, 0);         // yellow fill
  rect(50, 50, 100, 100);
  
  stroke(0);                 // black outline
  strokeWeight(1);           // thin border
  noFill();                  // no interior color
  rect(200, 200, 100, 100);
}
```

## Understanding RGB Colors {.smaller}

```javascript
fill(255, 0, 0);     // Pure Red
fill(0, 255, 0);     // Pure Green  
fill(0, 0, 255);     // Pure Blue
fill(255, 255, 0);   // Yellow (Red + Green)
fill(255, 0, 255);   // Magenta (Red + Blue)
fill(0, 255, 255);   // Cyan (Green + Blue)
fill(255, 255, 255); // White
fill(0, 0, 0);       // Black
fill(128, 128, 128); // Gray
```

:::{.incremental}
- **R**ed, **G**reen, **B**lue values
- Each value: 0-255 (0 = none, 255 = maximum)
- Mix values to create any color
:::

## RGB Color System Explained

:::{.incremental}
- **Additive color model** (light-based)
- Each pixel has red, green, and blue light components
- **0**: No light (dark/off)
- **255**: Maximum light (brightest)
- Combining all three at 255 = white light
- All three at 0 = no light (black)
:::

## RGBA Transparency

You can add a fourth "alpha" argument to color settings in p5.js, which sets the opacity.

Alpha values run from 0 (totally transparent) to 255 for (totally opaque). 

```javascript
// creates a red circle with 50% transaprency
fill(255, 0, 0, 127);
circle(200, 200, 10);
```

## Code along with me! {.center}

![or take notes if you prefer](https://img.tpt.cloud/nextavenue/uploads/2021/09/bobrossestate-01.inside.1280x720.jpg)


## Key Takeaways {.smaller}

:::{.incremental}
- `setup()`: runs once, initialize your program
- `draw()`: runs continuously, create animations
- `createCanvas()`: set your drawing area size
- `rect()` and `line()`: basic drawing commands
- `fill()` and `stroke()`: control colors
- `rectMode()`: change how rectangles are positioned
- RGB: mix red, green, blue values (0-255) for any color
:::

## Resources

- [p5.js Official Website](https://p5js.org/)
- [p5.js Reference](https://p5js.org/reference/)
- [p5.js Web Editor](https://editor.p5js.org/)


## Coordinate Systems


![Adrian Piper, *Charted Work Proposal for January â€“ December 1969, 1968*. Typescript and graph paper with space/time coordinate diagrams under sheet protectors in ring binder](https://www.thomaserben.com/wp-content/uploads/API_1968_Charted-Work-Proposal-for-January_1_400.jpg)

# Complete Exit Ticket with (x,y) coordinates


